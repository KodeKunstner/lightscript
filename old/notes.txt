language design:

types:
	any (string, function)
	integer
	stack
	hashtable
	ilist

function:
	char[] code



------
garbage collection:

Generational copy-collector+compacting mark and sweep,
three memory segments:

--
gc
--
recent
-- oldtop
old
--

gc and recent has same size and is swapped during each cc-gc.

on reference write:
    if(target <= oldtop && reference > oldtop) {
    	push target onto gc-stack.
	if(gc-stack is full) {
		GC();
	}
    }

GC:
    for each container in gc-stack:
        mark children of container to be old
	remember each unique old-container for later
    copy-gc new-olds to bottom of recent.
    copy-collect the remaining part of recent.

    if memory low:
        do a full mark-and-sweep compacting run,
	and everyone except stack is old.

---------------------------------------------------------------------
code compression via superinstructions in vm


---------------------------------------------------------------------
> Yesterday, I was at the speciale defense of another student.  The lesson I
> would take away from it is that it is very important to know the related
> work, both how it works and how it relates to your work.  Because the
> censor probably knows a lot more about the related work than he does about
> your work, and so it is easy for him to ask questions about that.

------------------------------
Idea:
generalised virtual machine

inteface function {
    apply(vm);
}

InterpretedFunction: {
    Function ops[256];
    Byte[] code;
    Object[] closure;
    apply(vm) {
        vm.call(this);
    }
}

Continuation: {
    Int pc;
    Stack stack;
    Function fn;

    fromFn(fn, cont) {
        Stack.empty();
        this.fn = fn;
        pc = 0;
    }

    function interpret(fn) {
        byte[] code = fn.code;
	function[] ops = fn.ops;
	size = code.length;
	while(pc<size) {
	    ops[code[pc]].apply(this);
	    pc++;
	}
    }
}
